'use strict';

const _ = require('lodash');
<<<<<<< HEAD
const { logger } = require('./utils/logger');
const Promise = require('./promise');
const debug = logger.debugContext('hooks');

const hookTypes = {
  beforeValidate: { params: 2 },
  afterValidate: { params: 2 },
  validationFailed: { params: 3 },
  beforeCreate: { params: 2 },
  afterCreate: { params: 2 },
  beforeDestroy: { params: 2 },
  afterDestroy: { params: 2 },
  beforeRestore: { params: 2 },
  afterRestore: { params: 2 },
  beforeUpdate: { params: 2 },
  afterUpdate: { params: 2 },
  beforeSave: { params: 2, proxies: ['beforeUpdate', 'beforeCreate'] },
  afterSave: { params: 2, proxies: ['afterUpdate', 'afterCreate'] },
  beforeUpsert: { params: 2 },
  afterUpsert: { params: 2 },
  beforeBulkCreate: { params: 2 },
  afterBulkCreate: { params: 2 },
  beforeBulkDestroy: { params: 1 },
  afterBulkDestroy: { params: 1 },
  beforeBulkRestore: { params: 1 },
  afterBulkRestore: { params: 1 },
  beforeBulkUpdate: { params: 1 },
  afterBulkUpdate: { params: 1 },
  beforeFind: { params: 1 },
  beforeFindAfterExpandIncludeAll: { params: 1 },
  beforeFindAfterOptions: { params: 1 },
  afterFind: { params: 2 },
  beforeCount: { params: 1 },
  beforeDefine: { params: 2, sync: true, noModel: true },
  afterDefine: { params: 1, sync: true, noModel: true },
  beforeInit: { params: 2, sync: true, noModel: true },
  afterInit: { params: 1, sync: true, noModel: true },
  beforeAssociate: { params: 2, sync: true },
  afterAssociate: { params: 2, sync: true },
  beforeConnect: { params: 1, noModel: true },
  afterConnect: { params: 2, noModel: true },
  beforeSync: { params: 1 },
  afterSync: { params: 1 },
  beforeBulkSync: { params: 1 },
  afterBulkSync: { params: 1 },
  beforeQuery: { params: 2 },
  afterQuery: { params: 2 }
};
exports.hooks = hookTypes;


/**
 * get array of current hook and its proxies combined
 *
 * @param {string} hookType any hook type @see {@link hookTypes}
 *
=======
const Utils = require('./utils');
const Promise = require('./promise');
const debug = Utils.getLogger().debugContext('hooks');

const hookTypes = {
  beforeValidate: {params: 2},
  afterValidate: {params: 2},
  validationFailed: {params: 3},
  beforeCreate: {params: 2},
  afterCreate: {params: 2},
  beforeDestroy: {params: 2},
  afterDestroy: {params: 2},
  beforeRestore: {params: 2},
  afterRestore: {params: 2},
  beforeUpdate: {params: 2},
  afterUpdate: {params: 2},
  beforeSave: {params: 2, proxies: ['beforeUpdate', 'beforeCreate']},
  afterSave: {params: 2, proxies: ['afterUpdate', 'afterCreate']},
  beforeUpsert: {params: 2},
  afterUpsert: {params: 2},
  beforeBulkCreate: {params: 2},
  afterBulkCreate: {params: 2},
  beforeBulkDestroy: {params: 1},
  afterBulkDestroy: {params: 1},
  beforeBulkRestore: {params: 1},
  afterBulkRestore: {params: 1},
  beforeBulkUpdate: {params: 1},
  afterBulkUpdate: {params: 1},
  beforeFind: {params: 1},
  beforeFindAfterExpandIncludeAll: {params: 1},
  beforeFindAfterOptions: {params: 1},
  afterFind: {params: 2},
  beforeCount: {params: 1},
  beforeDefine: {params: 2, sync: true},
  afterDefine: {params: 1, sync: true},
  beforeInit: {params: 2, sync: true},
  afterInit: {params: 1, sync: true},
  beforeConnect: {params: 1},
  afterConnect: {params: 2},
  beforeSync: {params: 1},
  afterSync: {params: 1},
  beforeBulkSync: {params: 1},
  afterBulkSync: {params: 1}
};
exports.hooks = hookTypes;

const hookAliases = {
  beforeDelete: 'beforeDestroy',
  afterDelete: 'afterDestroy',
  beforeBulkDelete: 'beforeBulkDestroy',
  afterBulkDelete: 'afterBulkDestroy',
  beforeConnection: 'beforeConnect'
};
exports.hookAliases = hookAliases;

/**
 * get array of current hook and its proxied hooks combined
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 * @private
 */
const getProxiedHooks = hookType =>
  hookTypes[hookType].proxies
    ? hookTypes[hookType].proxies.concat(hookType)
    : [hookType]
;

<<<<<<< HEAD
function getHooks(hooked, hookType) {
  return (hooked.options.hooks || {})[hookType] || [];
}
=======
function getHooks(hookType) {
  return (this.options.hooks || {})[hookType] || [];
};
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b

const Hooks = {
  /**
   * Process user supplied hooks definition
   *
<<<<<<< HEAD
   * @param {Object} hooks hooks definition
   *
   * @private
   * @memberof Sequelize
   * @memberof Sequelize.Model
=======
   * @param {Object} hooks
   *
   * @private
   * @memberOf Sequelize
   * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
   */
  _setupHooks(hooks) {
    this.options.hooks = {};
    _.map(hooks || {}, (hooksArray, hookName) => {
<<<<<<< HEAD
      if (!Array.isArray(hooksArray)) hooksArray = [hooksArray];
=======
      if (!_.isArray(hooksArray)) hooksArray = [hooksArray];
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
      hooksArray.forEach(hookFn => this.addHook(hookName, hookFn));
    });
  },

<<<<<<< HEAD
  runHooks(hooks, ...hookArgs) {
    if (!hooks) throw new Error('runHooks requires at least 1 argument');

=======
  runHooks(hooks) {
    if (!hooks) throw new Error('runHooks requires at least 1 argument');

    const hookArgs = Utils.sliceArgs(arguments, 1);
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
    let hookType;

    if (typeof hooks === 'string') {
      hookType = hooks;
<<<<<<< HEAD
      hooks = getHooks(this, hookType);

      if (this.sequelize) {
        hooks = hooks.concat(getHooks(this.sequelize, hookType));
=======
      hooks = getHooks.call(this, hookType);

      if (this.sequelize) {
        hooks = hooks.concat(getHooks.call(this.sequelize, hookType));
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
      }
    }

    if (!Array.isArray(hooks)) {
      hooks = [hooks];
    }

    // synchronous hooks
    if (hookTypes[hookType] && hookTypes[hookType].sync) {
      for (let hook of hooks) {
        if (typeof hook === 'object') {
          hook = hook.fn;
        }

        debug(`running hook(sync) ${hookType}`);
        hook.apply(this, hookArgs);
      }
      return;
    }

    // asynchronous hooks (default)
    return Promise.each(hooks, hook => {
      if (typeof hook === 'object') {
        hook = hook.fn;
      }

      debug(`running hook ${hookType}`);
<<<<<<< HEAD
      return hook.apply(this, hookArgs);
    }).return();
  },

  /**
   * Add a hook to the model
   *
   * @param {string}          hookType hook name @see {@link hookTypes}
   * @param {string|Function} [name] Provide a name for the hook function. It can be used to remove the hook later or to order hooks based on some sort of priority system in the future.
   * @param {Function}        fn The hook function
   *
   * @memberof Sequelize
   * @memberof Sequelize.Model
=======
      return Promise.resolve(hook.apply(this, hookArgs));
    }).return();
  },

  hook() {
    Utils.deprecate('hook() method has been deprecated, please use addHook() method instead');
    return Hooks.addHook.apply(this, arguments);
  },

  /**
   * Add a hook to the model
   *
   * @param {String}    hookType
   * @param {String}    [name]    Provide a name for the hook function. It can be used to remove the hook later or to order hooks based on some sort of priority system in the future.
   * @param {Function}  fn        The hook function
   *
   * @memberOf Sequelize
   * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
   */
  addHook(hookType, name, fn) {
    if (typeof name === 'function') {
      fn = name;
      name = null;
    }

    debug(`adding hook ${hookType}`);
<<<<<<< HEAD
    // check for proxies, add them too
    hookType = getProxiedHooks(hookType);

    hookType.forEach(type => {
      const hooks = getHooks(this, type);
      hooks.push(name ? { name, fn } : fn);
      this.options.hooks[type] = hooks;
=======
    const originalHookType = hookType;
    hookType = hookAliases[hookType] || hookType;

    if (hookAliases[originalHookType]) {
      Utils.deprecate(`${originalHookType} hook has been deprecated, please use ${hookType} hook instead`);
    }

    // check for proxies, add them too
    hookType = getProxiedHooks(hookType);

    _.each(hookType, type => {
      this.options.hooks[type] = getHooks.call(this, type);
      this.options.hooks[type].push(name ? {name, fn} : fn);
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
    });

    return this;
  },

  /**
   * Remove hook from the model
   *
<<<<<<< HEAD
   * @param {string} hookType @see {@link hookTypes}
   * @param {string|Function} name name of hook or function reference which was attached
   *
   * @memberof Sequelize
   * @memberof Sequelize.Model
   */
  removeHook(hookType, name) {
=======
   * @param {String} hookType
   * @param {String|Function} name
   *
   * @memberOf Sequelize
   * @memberOf Sequelize.Model
   */
  removeHook(hookType, name) {
    hookType = hookAliases[hookType] || hookType;
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
    const isReference = typeof name === 'function' ? true : false;

    if (!this.hasHook(hookType)) {
      return this;
    }

<<<<<<< HEAD
    debug(`removing hook ${hookType}`);
=======
    Utils.debug(`removing hook ${hookType}`);
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b

    // check for proxies, add them too
    hookType = getProxiedHooks(hookType);

    for (const type of hookType) {
      this.options.hooks[type] = this.options.hooks[type].filter(hook => {
        if (isReference && typeof hook === 'function') {
          return hook !== name; // check if same method
<<<<<<< HEAD
        }
        if (!isReference && typeof hook === 'object') {
=======
        } else if (!isReference && typeof hook === 'object') {
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
          return hook.name !== name;
        }
        return true;
      });
    }

    return this;
  },

  /**
   * Check whether the mode has any hooks of this type
   *
<<<<<<< HEAD
   * @param {string} hookType @see {@link hookTypes}
   *
   * @alias hasHooks
   *
   * @memberof Sequelize
   * @memberof Sequelize.Model
=======
   * @param {String}  hookType
   *
   * @alias hasHooks
   * @memberOf Sequelize
   * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
   */
  hasHook(hookType) {
    return this.options.hooks[hookType] && !!this.options.hooks[hookType].length;
  }
};
Hooks.hasHooks = Hooks.hasHook;


<<<<<<< HEAD
function applyTo(target, isModel = false) {
  _.mixin(target, Hooks);

  for (const hook of Object.keys(hookTypes)) {
    if (isModel && hookTypes[hook].noModel) {
      continue;
    }
=======
function applyTo(target) {
  _.mixin(target, Hooks);

  const allHooks = Object.keys(hookTypes).concat(Object.keys(hookAliases));
  for (const hook of allHooks) {
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
    target[hook] = function(name, callback) {
      return this.addHook(hook, name, callback);
    };
  }
}
exports.applyTo = applyTo;

/**
 * A hook that is run before validation
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with instance, options
 * @name beforeValidate
 * @memberof Sequelize.Model
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with instance, options
 * @name beforeValidate
 * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run after validation
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with instance, options
 * @name afterValidate
 * @memberof Sequelize.Model
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with instance, options
 * @name afterValidate
 * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run when validation fails
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with instance, options, error. Error is the
 * SequelizeValidationError. If the callback throws an error, it will replace the original validation error.
 * @name validationFailed
 * @memberof Sequelize.Model
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with instance, options, error. Error is the
 * SequelizeValidationError. If the callback throws an error, it will replace the original validation error.
 * @name validationFailed
 * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run before creating a single instance
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with attributes, options
 * @name beforeCreate
 * @memberof Sequelize.Model
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with attributes, options
 * @name beforeCreate
 * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run after creating a single instance
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with attributes, options
 * @name afterCreate
 * @memberof Sequelize.Model
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with attributes, options
 * @name afterCreate
 * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run before creating or updating a single instance, It proxies `beforeCreate` and `beforeUpdate`
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with attributes, options
 * @name beforeSave
 * @memberof Sequelize.Model
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with attributes, options
 * @name beforeSave
 * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run before upserting
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with attributes, options
 * @name beforeUpsert
 * @memberof Sequelize.Model
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with attributes, options
 * @name beforeUpsert
 * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run after upserting
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with the result of upsert(), options
 * @name afterUpsert
 * @memberof Sequelize.Model
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with attributes, options
 * @name afterUpsert
 * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
  * A hook that is run after creating or updating a single instance, It proxies `afterCreate` and `afterUpdate`
<<<<<<< HEAD
  * @param {string}   name
  * @param {Function} fn   A callback function that is called with attributes, options
  * @name afterSave
  * @memberof Sequelize.Model
=======
  * @param {String}   name
  * @param {Function} fn   A callback function that is called with attributes, options
  * @name afterSave
  * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
  */

/**
 * A hook that is run before destroying a single instance
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with instance, options
 *
 * @name beforeDestroy
 * @memberof Sequelize.Model
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with instance, options
 *
 * @name beforeDestroy
 * @alias beforeDelete
 * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run after destroying a single instance
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with instance, options
 *
 * @name afterDestroy
 * @memberof Sequelize.Model
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with instance, options
 *
 * @name afterDestroy
 * @alias afterDelete
 * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run before restoring a single instance
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with instance, options
 *
 * @name beforeRestore
 * @memberof Sequelize.Model
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with instance, options
 *
 * @name beforeRestore
 * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run after restoring a single instance
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with instance, options
 *
 * @name afterRestore
 * @memberof Sequelize.Model
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with instance, options
 *
 * @name afterRestore
 * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run before updating a single instance
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with instance, options
 * @name beforeUpdate
 * @memberof Sequelize.Model
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with instance, options
 * @name beforeUpdate
 * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run after updating a single instance
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with instance, options
 * @name afterUpdate
 * @memberof Sequelize.Model
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with instance, options
 * @name afterUpdate
 * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run before creating instances in bulk
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with instances, options
 * @name beforeBulkCreate
 * @memberof Sequelize.Model
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with instances, options
 * @name beforeBulkCreate
 * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run after creating instances in bulk
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with instances, options
 * @name afterBulkCreate
 * @memberof Sequelize.Model
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with instances, options
 * @name afterBulkCreate
 * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run before destroying instances in bulk
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with options
 *
 * @name beforeBulkDestroy
 * @memberof Sequelize.Model
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with options
 *
 * @name beforeBulkDestroy
 * @alias beforeBulkDelete
 * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run after destroying instances in bulk
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with options
 *
 * @name afterBulkDestroy
 * @memberof Sequelize.Model
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with options
 *
 * @name afterBulkDestroy
 * @alias afterBulkDelete
 * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run before restoring instances in bulk
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with options
 *
 * @name beforeBulkRestore
 * @memberof Sequelize.Model
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with options
 *
 * @name beforeBulkRestore
 * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run after restoring instances in bulk
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with options
 *
 * @name afterBulkRestore
 * @memberof Sequelize.Model
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with options
 *
 * @name afterBulkRestore
 * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run before updating instances in bulk
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with options
 * @name beforeBulkUpdate
 * @memberof Sequelize.Model
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with options
 * @name beforeBulkUpdate
 * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run after updating instances in bulk
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with options
 * @name afterBulkUpdate
 * @memberof Sequelize.Model
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with options
 * @name afterBulkUpdate
 * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run before a find (select) query
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with options
 * @name beforeFind
 * @memberof Sequelize.Model
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with options
 * @name beforeFind
 * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run before a find (select) query, after any { include: {all: ...} } options are expanded
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with options
 * @name beforeFindAfterExpandIncludeAll
 * @memberof Sequelize.Model
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with options
 * @name beforeFindAfterExpandIncludeAll
 * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run before a find (select) query, after all option parsing is complete
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with options
 * @name beforeFindAfterOptions
 * @memberof Sequelize.Model
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with options
 * @name beforeFindAfterOptions
 * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run after a find (select) query
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with instance(s), options
 * @name afterFind
 * @memberof Sequelize.Model
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with instance(s), options
 * @name afterFind
 * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run before a count query
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with options
 * @name beforeCount
 * @memberof Sequelize.Model
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with options
 * @name beforeCount
 * @memberOf Sequelize.Model
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run before a define call
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with attributes, options
 * @name beforeDefine
 * @memberof Sequelize
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with attributes, options
 * @name beforeDefine
 * @memberOf Sequelize
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run after a define call
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with factory
 * @name afterDefine
 * @memberof Sequelize
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with factory
 * @name afterDefine
 * @memberOf Sequelize
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run before Sequelize() call
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with config, options
 * @name beforeInit
 * @memberof Sequelize
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with config, options
 * @name beforeInit
 * @memberOf Sequelize
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run after Sequelize() call
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with sequelize
 * @name afterInit
 * @memberof Sequelize
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with sequelize
 * @name afterInit
 * @memberOf Sequelize
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run before a connection is created
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with config passed to connection
 * @name beforeConnect
 * @memberof Sequelize
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with config passed to connection
 * @name beforeConnect
 * @memberOf Sequelize
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run after a connection is created
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with the connection object and thye config passed to connection
 * @name afterConnect
 * @memberof Sequelize
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with the connection object and thye config passed to connection
 * @name afterConnect
 * @memberOf Sequelize
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run before Model.sync call
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with options passed to Model.sync
 * @name beforeSync
 * @memberof Sequelize
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with options passed to Model.sync
 * @name beforeSync
 * @memberOf Sequelize
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
 * A hook that is run after Model.sync call
<<<<<<< HEAD
 * @param {string}   name
 * @param {Function} fn   A callback function that is called with options passed to Model.sync
 * @name afterSync
 * @memberof Sequelize
=======
 * @param {String}   name
 * @param {Function} fn   A callback function that is called with options passed to Model.sync
 * @name afterSync
 * @memberOf Sequelize
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
 */

/**
  * A hook that is run before sequelize.sync call
<<<<<<< HEAD
  * @param {string}   name
  * @param {Function} fn   A callback function that is called with options passed to sequelize.sync
  * @name beforeBulkSync
  * @memberof Sequelize
=======
  * @param {String}   name
  * @param {Function} fn   A callback function that is called with options passed to sequelize.sync
  * @name beforeBulkSync
  * @memberOf Sequelize
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
  */

/**
  * A hook that is run after sequelize.sync call
<<<<<<< HEAD
  * @param {string}   name
  * @param {Function} fn   A callback function that is called with options passed to sequelize.sync
  * @name afterBulkSync
  * @memberof Sequelize
=======
  * @param {String}   name
  * @param {Function} fn   A callback function that is called with options passed to sequelize.sync
  * @name afterBulkSync
  * @memberOf Sequelize
>>>>>>> 19d16fd3efdfc5b255b1d822e05b7c2aacd7873b
  */
